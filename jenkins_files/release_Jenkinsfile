pipeline {
  agent {
    node {
      label 'stratus_slave'
    }
  }
  // The options directive is for configuration that applies to the whole job.
  options {
    buildDiscarder(logRotator(numToKeepStr:'20'))
    timeout(time: 40, unit: 'MINUTES')
    timestamps()
  }
  stages {
    stage('Clean') {
      steps {
        sh '''
        # Kill any running containers
        running=$(docker ps -a -q| wc -l)
        if [ "$running" -gt "0" ];then
          echo "Killing containers"
          docker rm -f $(docker ps -a -q)
        fi
        '''
      }
    }
    stage('Image Version') {
      steps {
        script {
          sh '''
          if (git log -1 | grep "\\[PATCH\\]"); then
            COMMIT_VERSION=patch;
          elif (git log -1 | grep "\\[MINOR\\]"); then
            COMMIT_VERSION=minor;
          elif (git log -1 | grep "\\[MAJOR\\]"); then
            COMMIT_VERSION=major;
          else
            echo 'Release Failed. Commit message must contain one of the following: [PATCH]/[MINOR]/[MAJOR]'
            exit 1
          fi;
          docker run --rm -v $PWD:/app -w /app armdocker.seli.gic.ericsson.se/dockerhub-ericsson-remote/treeder/bump:1.2.8 $COMMIT_VERSION
          '''
          env.IMAGE_VERSION = readFile('VERSION').trim()
          currentBuild.displayName = "#${env.BUILD_NUMBER} - OQS Smoketests Version - ${env.IMAGE_VERSION}"
          sh "mvn versions:set -DnewVersion=${env.IMAGE_VERSION}-SNAPSHOT versions:commit"
        }
      }
    }
    stage('Image: Build & Publish') {
      steps {
        script {
          def image_name = 'armdocker.seli.gic.ericsson.se/proj-openstack_queuing_solution/oqs_smoketest:latest'
          // Build
          def image_build = docker.build("${image_name}", "-f ${env.WORKSPACE}/Dockerfile ${env.WORKSPACE}")
          image_build.tag("${env.IMAGE_VERSION}")
          // Publish
          image_build.push("${env.IMAGE_VERSION}")
          image_build.push('latest')
        }
      }
    }
    stage('Clean Up') {
      steps {
        sh """
        docker rmi armdocker.seli.gic.ericsson.se/proj-openstack_queuing_solution/oqs_smoketest:${env.IMAGE_VERSION}
        docker rmi armdocker.seli.gic.ericsson.se/proj-openstack_queuing_solution/oqs_smoketest:latest
        """
      }
    }
  }
  // The post build actions
  post {
    success {
      echo "Pipeline Successfully Completed - Commit Version $IMAGE_VERSION"
      sh '''
      git config user.name ENM_Jenkins
      git config user.email enmadm100@lmera.ericsson.se
      git add VERSION pom.xml
      git commit -m "Version $IMAGE_VERSION"
      git rebase HEAD gcn/master
      git push gcn HEAD:master
      '''

      echo "Deploy Smoketests Change Logs"
      sh '''
      git checkout master
      mvn release:prepare release:perform -Darguments="-Dcode_style_branch_compare=remotes/gcn/master" -Dgoals="site:site -Psite_versioned site:deploy deploy" -DpreparationGoals="clean install -U" -DlocalCheckout="true"
      mvn site:site
      mvn -Psite_latest site:deploy
      '''
    }
    failure {
      emailext(attachLog: true,
               attachmentsPattern: 'currentBuild.rawBuild.log',
               from: 'enmadm100@lmera.ericsson.se',
               to: "${env.GERRIT_EVENT_ACCOUNT_EMAIL}",
               subject: "Failed: Jenkins Job ${env.JOB_NAME}",
               body: "Job: ${env.JOB_NAME}\nBuild Number: ${env.BUILD_NUMBER}\nThe Job build URL: ${env.BUILD_URL}")
    }
  }
}
